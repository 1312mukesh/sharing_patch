diff --git a/hmp.c b/hmp.c
index 3f807b7..7663c42 100644
--- a/hmp.c
+++ b/hmp.c
@@ -1475,6 +1475,7 @@ static void hmp_migrate_status_cb(void *opaque)
 
 void hmp_migrate(Monitor *mon, const QDict *qdict)
 {
+    printf("Qemu::%s\n", __func__);
     bool detach = qdict_get_try_bool(qdict, "detach", false);
     bool blk = qdict_get_try_bool(qdict, "blk", false);
     bool inc = qdict_get_try_bool(qdict, "inc", false);
diff --git a/hw/ppc/spapr_rtas.c b/hw/ppc/spapr_rtas.c
index 2986f94..71d7e53 100644
--- a/hw/ppc/spapr_rtas.c
+++ b/hw/ppc/spapr_rtas.c
@@ -34,10 +34,11 @@
 #include "hw/ppc/spapr.h"
 #include "hw/ppc/spapr_vio.h"
 #include "qapi-event.h"
-
+#include "qapi-types.h"
 #include <libfdt.h>
 #include "hw/ppc/spapr_drc.h"
-
+#include "hmp.h"
+#include "qmp-commands.h"
 /* #define DEBUG_SPAPR */
 
 #ifdef DEBUG_SPAPR
@@ -48,6 +49,51 @@
     do { } while (0)
 #endif
 
+typedef struct HMPMigrationStatus
+{
+    QEMUTimer *timer;
+//   Monitor *mon;
+    bool is_block_migration;
+} HMPMigrationStatus;
+
+
+static void hmp_migrate_status_cb(void *opaque)
+{
+    HMPMigrationStatus *status = opaque;
+    MigrationInfo *info;
+
+    info = qmp_query_migrate(NULL);
+    if (!info->has_status || info->status == MIGRATION_STATUS_ACTIVE ||
+        info->status == MIGRATION_STATUS_SETUP) {
+        if (info->has_disk) {
+//            int progress;
+
+            if (info->disk->remaining) {
+//                progress = info->disk->transferred * 100 / info->disk->total;
+            } else {
+//                progress = 100;
+            }
+
+ //           monitor_printf(status->mon, "Completed %d %%\r", progress);
+//            monitor_flush(status->mon);
+        }
+
+        timer_mod(status->timer, qemu_clock_get_ms(QEMU_CLOCK_REALTIME) + 1000);
+    } else {
+        if (status->is_block_migration) {
+  //          monitor_printf(status->mon, "\n");
+        }
+ //       monitor_resume(status->mon);
+        timer_del(status->timer);
+        g_free(status);
+    }
+
+    qapi_free_MigrationInfo(info);
+}
+
+
+
+
 static sPAPRConfigureConnectorState *spapr_ccs_find(sPAPRMachineState *spapr,
                                                     uint32_t drc_index)
 {
@@ -295,6 +341,71 @@ static void rtas_ibm_os_term(PowerPCCPU *cpu,
     rtas_st(rets, 0, ret);
 }
 
+static void rtas_ibm_update_nodes(PowerPCCPU *cpu,
+                            sPAPRMachineState *spapr,
+                            uint32_t token, uint32_t nargs,
+                            target_ulong args,
+                            uint32_t nret, target_ulong rets)
+{
+        printf("QEMU::=Func::%s\n", __func__);
+}
+
+
+static void rtas_ibm_activate_firmware(PowerPCCPU *cpu,
+                            sPAPRMachineState *spapr,
+                            uint32_t token, uint32_t nargs,
+                            target_ulong args,
+                            uint32_t nret, target_ulong rets)
+{
+        printf("QEMU::=Func::%s\n", __func__);
+}
+
+
+static void rtas_ibm_suspend_me(PowerPCCPU *cpu,
+                            sPAPRMachineState *spapr,
+                            uint32_t token, uint32_t nargs,
+                            target_ulong args,
+                            uint32_t nret, target_ulong rets)
+{
+      printf("qemu::IMP::%s\n", __func__);
+//    bool detach = qdict_get_try_bool(qdict, "detach", false);
+//    bool blk = qdict_get_try_bool(qdict, "blk", false);
+//    bool inc = qdict_get_try_bool(qdict, "inc", false);
+    bool detach = 0;
+//    const char *uri = qdict_get_str(qdict, "uri");
+    const char *uri = "exec:gzip -c > STATEFILE.gz";
+    Error *err = NULL;
+     printf("QEMU::=Func::%s\n", __func__);
+    qmp_migrate(uri, 0, 0, 0, 0, false, false, &err);
+    if (err) {
+//        monitor_printf(mon, "migrate: %s\n", error_get_pretty(err));
+        error_free(err);
+        return;
+    }
+
+    if (!detach) {
+        HMPMigrationStatus *status;
+
+//        if (monitor_suspend(mon) < 0) {
+//            monitor_printf(mon, "terminal does not allow synchronous "
+//                           "migration, continuing detached\n");
+//            return;
+//        }
+
+        status = g_malloc0(sizeof(*status));
+//        status->mon = mon;
+//        status->is_block_migration = blk || inc;
+        status->is_block_migration = 0 || 0;
+        status->timer = timer_new_ms(QEMU_CLOCK_REALTIME, hmp_migrate_status_cb,
+                                          status);
+        timer_mod(status->timer, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+    }
+
+}
+
+
+
+
 static void rtas_set_power_level(PowerPCCPU *cpu, sPAPRMachineState *spapr,
                                  uint32_t token, uint32_t nargs,
                                  target_ulong args, uint32_t nret,
@@ -481,6 +592,19 @@ static void rtas_get_sensor_state(PowerPCCPU *cpu, sPAPRMachineState *spapr,
 #define CC_VAL_DATA_OFFSET ((CC_IDX_PROP_DATA_OFFSET + 1) * 4)
 #define CC_WA_LEN 4096
 
+
+static void rtas_ibm_migratable_partition(PowerPCCPU *cpu,
+                                         sPAPRMachineState *spapr,
+                                         uint32_t token, uint32_t nargs,
+                                         target_ulong args, uint32_t nret,
+                                         target_ulong rets)
+{
+	printf("QEMU::=Func::%s\n", __func__);
+	
+}
+
+
+
 static void rtas_ibm_configure_connector(PowerPCCPU *cpu,
                                          sPAPRMachineState *spapr,
                                          uint32_t token, uint32_t nargs,
@@ -720,8 +844,14 @@ int spapr_rtas_device_tree_setup(void *fdt, hwaddr rtas_addr,
 
 static void core_rtas_register_types(void)
 {
+    spapr_rtas_register(RTAS_IBM_UPDATE_NODES, "ibm,update-nodes",
+                        rtas_ibm_update_nodes);
+    spapr_rtas_register(RTAS_IBM_ACTIVATE_FIRMWARE, "ibm,activate-firmware",
+                        rtas_ibm_activate_firmware);
     spapr_rtas_register(RTAS_DISPLAY_CHARACTER, "display-character",
                         rtas_display_character);
+    spapr_rtas_register(RTAS_IBM_SUSPEND_ME, "ibm,suspend-me",
+                        rtas_ibm_suspend_me);
     spapr_rtas_register(RTAS_POWER_OFF, "power-off", rtas_power_off);
     spapr_rtas_register(RTAS_SYSTEM_REBOOT, "system-reboot",
                         rtas_system_reboot);
@@ -747,6 +877,9 @@ static void core_rtas_register_types(void)
                         rtas_get_sensor_state);
     spapr_rtas_register(RTAS_IBM_CONFIGURE_CONNECTOR, "ibm,configure-connector",
                         rtas_ibm_configure_connector);
+    spapr_rtas_register(RTAS_IBM_MIGRATABLE_PARTITION, "ibm,migratable-partition",
+                        rtas_ibm_migratable_partition);
+
 }
 
 type_init(core_rtas_register_types)
diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
index 91a61ab..6cc63b8 100644
--- a/include/hw/ppc/spapr.h
+++ b/include/hw/ppc/spapr.h
@@ -457,8 +457,12 @@ int spapr_allocate_irq_block(int num, bool lsi, bool msi);
 #define RTAS_IBM_SET_SLOT_RESET                 (RTAS_TOKEN_BASE + 0x23)
 #define RTAS_IBM_CONFIGURE_PE                   (RTAS_TOKEN_BASE + 0x24)
 #define RTAS_IBM_SLOT_ERROR_DETAIL              (RTAS_TOKEN_BASE + 0x25)
+#define RTAS_IBM_SUSPEND_ME                     (RTAS_TOKEN_BASE + 0x26)
+#define RTAS_IBM_MIGRATABLE_PARTITION           (RTAS_TOKEN_BASE + 0x27)
+#define RTAS_IBM_ACTIVATE_FIRMWARE              (RTAS_TOKEN_BASE + 0x28)
+#define RTAS_IBM_UPDATE_NODES                   (RTAS_TOKEN_BASE + 0x29)
 
-#define RTAS_TOKEN_MAX                          (RTAS_TOKEN_BASE + 0x26)
+#define RTAS_TOKEN_MAX                          (RTAS_TOKEN_BASE + 0x30)
 
 /* RTAS ibm,get-system-parameter token values */
 #define RTAS_SYSPARM_SPLPAR_CHARACTERISTICS      20
diff --git a/migration/exec.c b/migration/exec.c
index 8406d2b..eb69ed4 100644
--- a/migration/exec.c
+++ b/migration/exec.c
@@ -36,6 +36,7 @@
 
 void exec_start_outgoing_migration(MigrationState *s, const char *command, Error **errp)
 {
+    printf("Qemu::%s\n", __func__);
     s->file = qemu_popen_cmd(command, "w");
     if (s->file == NULL) {
         error_setg_errno(errp, errno, "failed to popen the migration target");
diff --git a/migration/migration.c b/migration/migration.c
index 662e77e..40d887c 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -704,6 +704,7 @@ void qmp_migrate(const char *uri, bool has_blk, bool blk,
                  bool has_inc, bool inc, bool has_detach, bool detach,
                  Error **errp)
 {
+    printf("Qemu::%s\n", __func__);
     Error *local_err = NULL;
     MigrationState *s = migrate_get_current();
     MigrationParams params;
@@ -748,6 +749,7 @@ void qmp_migrate(const char *uri, bool has_blk, bool blk,
 #endif
 #if !defined(WIN32)
     } else if (strstart(uri, "exec:", &p)) {
+        printf("Qemu::%s::strstarturi::path=%s\n", __func__, p);
         exec_start_outgoing_migration(s, p, &local_err);
     } else if (strstart(uri, "unix:", &p)) {
         unix_start_outgoing_migration(s, p, &local_err);
@@ -809,6 +811,7 @@ int64_t qmp_query_migrate_cache_size(Error **errp)
 
 void qmp_migrate_set_speed(int64_t value, Error **errp)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s;
 
     if (value < 0) {
@@ -852,6 +855,7 @@ bool migrate_zero_blocks(void)
 
 bool migrate_use_compression(void)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s;
 
     s = migrate_get_current();
@@ -861,6 +865,7 @@ bool migrate_use_compression(void)
 
 int migrate_compress_level(void)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s;
 
     s = migrate_get_current();
@@ -870,6 +875,7 @@ int migrate_compress_level(void)
 
 int migrate_compress_threads(void)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s;
 
     s = migrate_get_current();
@@ -879,6 +885,7 @@ int migrate_compress_threads(void)
 
 int migrate_decompress_threads(void)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s;
 
     s = migrate_get_current();
@@ -917,6 +924,7 @@ int64_t migrate_xbzrle_cache_size(void)
 
 static void *migration_thread(void *opaque)
 {
+    printf("Qemu::%s\n", __func__);
     MigrationState *s = opaque;
     int64_t initial_time = qemu_clock_get_ms(QEMU_CLOCK_REALTIME);
     int64_t setup_start = qemu_clock_get_ms(QEMU_CLOCK_HOST);
diff --git a/migration/qemu-file-stdio.c b/migration/qemu-file-stdio.c
index 285068b..c90a591 100644
--- a/migration/qemu-file-stdio.c
+++ b/migration/qemu-file-stdio.c
@@ -130,6 +130,7 @@ static const QEMUFileOps stdio_pipe_write_ops = {
 
 QEMUFile *qemu_popen_cmd(const char *command, const char *mode)
 {
+    printf("Qemu::%s\n", __func__);
     FILE *stdio_file;
     QEMUFileStdio *s;
 
diff --git a/migration/qemu-file.c b/migration/qemu-file.c
index 6bb3dc1..5f23658 100644
--- a/migration/qemu-file.c
+++ b/migration/qemu-file.c
@@ -58,6 +58,7 @@ bool qemu_file_mode_is_not_valid(const char *mode)
 
 QEMUFile *qemu_fopen_ops(void *opaque, const QEMUFileOps *ops)
 {
+    printf("Qemu::%s\n", __func__);
     QEMUFile *f;
 
     f = g_malloc0(sizeof(QEMUFile));
